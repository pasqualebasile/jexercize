package com.example.accessingdatapostgresql;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    private static final Logger log = LoggerFactory.getLogger(MainController.class);
    @Autowired
    private PostRepository postRepository;


    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }


    @PostMapping(path="/addBody")
    public @ResponseBody String postUser (@RequestBody User userBody) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        log.info("/addBody");
        userRepository.save(userBody);
        return "Saved";
    }

    @PostMapping(path="/{userId}/addPost")
    public @ResponseBody Post postPost (@RequestBody  Post post, @PathVariable Long userId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        log.info("/addPost");
        // Faccio cos√¨ per provocare un 500 sulla base di userId (nel caso non esista per chiudere la relazione)
        // Se si usa uno userId che non esiste, allora viene fuori un 500 per fk violazione.
        //
        User user = new User();
        user.setId(userId);
        user.setName("Name");
        user.setEmail("Mail");
        post.setUser(user);
        Post outPost = postRepository.save(post);
        return outPost;
    }



    @GetMapping(path="/all")
    // ResponseEntity permette un maggiore controllo rispetto a @ResponseBody
    // ResponseEntity represents the whole HTTP response: status code, headers, and body.
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userRepository.findAll();
        // return ResponseEntity.ok(users);
        return new ResponseEntity<>(users, HttpStatus.OK);
    }

    @GetMapping(path="/findByName/{name}")
    public @ResponseBody Iterable<User> findByName(
            @PathVariable(name = "name") String name
    ) {
        log.info("Requested /find/" + name);
        // return userRepository.findUserByName(name);
        return userRepository.findUserByNameContainingIgnoreCase(name);
    }

    /**
     * Ritorna un utente a partire dal suo ID
     * @param id    ID dell'utente
     * @return un oggetto di tipo User
     */
    @GetMapping(path="/findById/{Id}")
    public @ResponseBody User getUserById(
            @PathVariable(name = "Id") Integer id
    ) {
        log.info("Requested /findById/" + id);
        return userRepository.findById(id).orElseThrow(
                () -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Utente non trovato")
        );
    }

    /**
     * Trying with Response entity
     * @param id
     * @return
     */
    @GetMapping(path="/findId/{Id}")
    public ResponseEntity<?> getUserId(
            @PathVariable(name = "Id") Integer id
    ) {
        log.info("Requested /findId/" + id);
        return userRepository.findById(id)
                             .map(user -> ResponseEntity.ok(user)) // If user is found, return 200 OK with the user
                             .orElseGet(() -> ResponseEntity.notFound().build()); // If not found, return 404 Not Found
    }




}


